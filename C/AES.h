#pragma once
#include <stdint.h>
#define NR 14
#define NB 4
#define NK 8
typedef uint8_t byte;
typedef uint32_t word;

byte SBox[16][16] = {
    {0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76},
    {0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0},
    {0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15},
    {0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75},
    {0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84},
    {0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF},
    {0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8},
    {0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2},
    {0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73},
    {0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB},
    {0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79},
    {0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08},
    {0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A},
    {0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E},
    {0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF},
    {0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16}
};

byte rSBox[16][16] = {
    {0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB},
    {0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB},
    {0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E},
    {0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25},
    {0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92},
    {0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84},
    {0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06},
    {0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B},
    {0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73},
    {0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E},
    {0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B},
    {0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4},
    {0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F},
    {0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF},
    {0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61},
    {0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D}
};

void AddRoundKey(byte state[16], word k[4])
{
    for (int i = 0; i < 4; ++i)
    {
        word k1 = k[i] >> 24;
        word k2 = (k[i] << 8) >> 24;
        word k3 = (k[i] << 16) >> 24;
        word k4 = (k[i] << 24) >> 24;

        state[i] = state[i] ^ k1;
        state[i + 4] = state[i + 4] ^ k2;
        state[i + 8] = state[i + 8] ^ k3;
        state[i + 12] = state[i + 12] ^ k4;
    }
}

byte GFMul(byte a, byte b) {
    byte p = 0;
    byte hi_bit_set;
    
    for (int counter = 0; counter < 8; counter++) {
        if ((b & 1) != 0) {
            p ^= a;
        }
        
        hi_bit_set = (byte)(a & 0x80);
        a <<= 1;
        if (hi_bit_set != 0) {
            a ^= 0x1b; /* x^8 + x^4 + x^3 + x + 1 */
        }
        b >>= 1;
    }
    return p;
}

void arrcopy(byte arr1[], int arr1Starting, int size, byte arr2[],int arr2Starting) {
    for (int i = 0; i < size; i++) {
        arr2[arr2Starting + i] = arr1[arr1Starting + i];
    }
}

byte IV[16] = { 0x00, 0x01, 0x02, 0x03,
                0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0a, 0x0b,
                0x0c, 0x0d, 0x0e, 0x0f };

void InvSubBytes(byte state[16]) {
    for (int i = 0; i < 16; ++i) {
        unsigned int col = state[i] & 15;
        unsigned int temp = state[i] & 240;
        unsigned int row = temp >> 4;
        state[i] = rSBox[row][col];
    }
}

void InvShiftRows(byte state[4 * 4]) {
    byte temp = state[7];
    for (int i = 3; i > 0; --i)
        state[i + 4] = state[i + 3];
    state[4] = temp;
    for (int i = 0; i < 2; ++i) {
        temp = state[i + 8];
        state[i + 8] = state[i + 10];
        state[i + 10] = temp;
    }
    temp = state[12];
    for (int i = 0; i < 3; ++i)
        state[i + 12] = state[i + 13];
    state[15] = temp;
}

void InvMixColumns(byte state[4 * 4]) {
    byte arr[4];
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j)
            arr[j] = state[i + j * 4];
        state[i] = GFMul(0x0e, arr[0]) ^ GFMul(0x0b, arr[1]) ^ GFMul(0x0d, arr[2]) ^ GFMul(0x09, arr[3]);
        state[i + 4] = GFMul(0x09, arr[0]) ^ GFMul(0x0e, arr[1]) ^ GFMul(0x0b, arr[2]) ^ GFMul(0x0d, arr[3]);
        state[i + 8] = GFMul(0x0d, arr[0]) ^ GFMul(0x09, arr[1]) ^ GFMul(0x0e, arr[2]) ^ GFMul(0x0b, arr[3]);
        state[i + 12] = GFMul(0x0b, arr[0]) ^ GFMul(0x0d, arr[1]) ^ GFMul(0x09, arr[2]) ^ GFMul(0x0e, arr[3]);
    }
}

void dec(byte input[16], word w[4 * (NR + 1)], byte IV[]) {
    word key[NK];
    for (int i = 0; i < NK; ++i)
        key[i] = w[4 * NR + i];
    AddRoundKey(input, key);
    for (int round = NR - 1; round > 0; --round) {
        InvShiftRows(input);
        InvSubBytes(input);
        for (int i = 0; i < NK; ++i)
            key[i] = w[4 * round + i];
        AddRoundKey(input, key);
        InvMixColumns(input);
    }
    InvShiftRows(input);
    InvSubBytes(input);
    for (int i = 0; i < NK; ++i)
        key[i] = w[i];
    AddRoundKey(input, key);
    for (int i = 0; i < 16; i++)
        input[i] = input[i] ^ IV[i];
}

void decrypt(byte cipherText[], byte IV[], word w[4 * (NR + 1)], int size) {
    int s = size;
    int len = s;
    s /= 16;
    byte tempArr1[16] = { 0 };
    int i = 0;
    for (i = 0; i < s; i++) {
        /*if (i == s - 1)
            printf("%d percent", ((int)((float)i + 1) * 100 / s));
        else
            printf("%d percent ->", ((int)((float)i + 1) * 100 / s));*/
        arrcopy(cipherText, 16 * i, 16, tempArr1, 0);
        dec(tempArr1, w, IV);
        arrcopy(cipherText, 16 * i, 16, IV, 0);
        arrcopy(tempArr1, 0, 16, cipherText, 16 * i);
    }
}

void SubBytes(byte state[16]) {
    for (int i = 0; i < 16; i++) {
        unsigned int col = state[i] & 15;
        unsigned int temp = state[i] & 240;
        unsigned int row = temp >> 4;
        state[i] = SBox[row][col];
    }
}

void ShiftRows(byte state[16]) {
    byte temp = state[4];
    for (int i = 0; i < 3; i++)
        state[i + 4] = state[i + 5];
    state[7] = temp;

    for (int i = 0; i < 2; i++) {
        temp = state[i + 8];
        state[i + 8] = state[i + 10];
        state[i + 10] = temp;
    }
    temp = state[15];
    for (int i = 3; i > 0; i--)
        state[i + 12] = state[i + 11];
    state[12] = temp;
}

void MixColumns(byte state[16]) {
    byte arr[4];
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j)
            arr[j] = state[i + j * 4];
        state[i] = GFMul(0x02, arr[0]) ^ GFMul(0x03, arr[1]) ^ arr[2] ^ arr[3];
        state[i + 4] = arr[0] ^ GFMul(0x02, arr[1]) ^ GFMul(0x03, arr[2]) ^ arr[3];
        state[i + 8] = arr[0] ^ arr[1] ^ GFMul(0x02, arr[2]) ^ GFMul(0x03, arr[3]);
        state[i + 12] = GFMul(0x03, arr[0]) ^ arr[1] ^ arr[2] ^ GFMul(0x02, arr[3]);
    }
}

void enc(byte input[4 * NB], word w[4 * (NR+ 1)], byte IV[]) {
    for (int i = 0; i < 16; i++)
        input[i] = input[i] ^ IV[i];
    word key[NK];
    for (int i = 0; i < NK; ++i)
        key[i] = w[i];
    AddRoundKey(input, key);
    for (int round = 1; round < NR; round++) {
        SubBytes(input);
        ShiftRows(input);
        MixColumns(input);
        for (int i = 0; i < NK; ++i)
            key[i] = w[4 * round + i];
        AddRoundKey(input, key);
    }
    SubBytes(input);
    ShiftRows(input);
    for (int i = 0; i < NK; ++i)
        key[i] = w[4 * NR+ i];
    AddRoundKey(input, key);
}

void encrypt(byte plain[], byte IV[], word w[4 * (NR + 1)], int size) {
    int s = size;
    int len = s;
    s /= 16;
    byte tempArr1[16];
    int i = 0;
    for (i = 0; i < s; i++) {
        /*if (i==s-1)
            printf("%d percent", ((int)((float)i + 1) * 100 / s));
        else
            printf("%d percent ->", ((int)((float)i + 1) * 100 / s));*/
        arrcopy(plain, 16 * i, 16, tempArr1, 0);
        enc(tempArr1, w, IV);
        arrcopy(tempArr1, 0, 16, IV, 0);
        arrcopy(tempArr1, 0, 16, plain, 16 * i);
    }
}

word Rcon[8] = { 0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000,
                 0x20000000, 0x40000000, 0x80000000};

word Word(byte k1, byte k2, byte k3, byte k4) {
    //{k1 k2 k3 k4}
    word result = 0x00000000;
    word temp;

    temp = k1;  //K1
    temp <<= 24;
    result |= temp;

    temp = k2;  // K2
    temp <<= 16;
    result |= temp;

    temp = k3;  // K3
    temp <<= 8;
    result |= temp;

    temp = k4;  // K4
    result |= temp;
    return result;
};

word RotWord(word rw) {
    word high = rw << 8;
    word low = rw >> 24;
    return high | low;
}

byte SubByte(byte b) {
    unsigned int col  = b & 15;
    unsigned int temp = b & 240;
    unsigned int row = temp >> 4;
    return SBox[row][col];
}

word SubWord(word sw) {
    word temp = sw;
    byte b1 = temp;
    temp >>= 8;
    byte b2 = temp;
    temp >>= 8;
    byte b3 = temp;
    temp >>= 8;
    byte b4 = temp;
    return Word(SubByte(b4), SubByte(b3), SubByte(b2), SubByte(b1));
}

void KeyExpansion(byte key[4 * NK], word w[4 * (NR + 1)]) {
    word temp;
    int i = 0;
    while (i < NK) {
        w[i] = Word(key[4 * i], key[4 * i + 1], key[4 * i + 2], key[4 * i + 3]);
        i++;
    }
    i = NK;
    while (i < NB * (NR + 1)) {
        temp = w[i - 1]; 
        if (i % NK == 0)
            temp = SubWord(RotWord(temp)) ^ Rcon[i / NK - 1];
        else if (i % NK == 4)
            temp = SubWord(temp);
        w[i] = w[i - NK] ^ temp;
        i++;
    }
}
